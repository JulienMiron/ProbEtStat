28/45
(28/45-18/36)/ sqrt((.5679-.5679^2) *(1/45+1/36))
10.98714-0.41143*4
0.41143/0.119025
sqrt(1/13 + (4-10.333)^2/225.66)
sqrt(1/13 + (4-10.333)^2/225.66) * 0.995831 * 2.201
9.34-1.106
9.34+1.106
a <- c(27.4, 22.1, 25.4, 21.1, 28.7, 27, 22.9, 20.5)
mean(a)
sd(a)
?sd
sum((a- mean(a))^2)
sum((a- mean(a))^2)/8
sum((a- mean(a))^2)/7
sum((a- mean(a))^2)/7
sqrt(sum((a- mean(a))^2)/7)
1.5/1.35
2.5/1.35
qt(p = 0.975, df = 24, lower.tail = F)
qt(p = 0.975, df = 24, lower.tail = T)
1/30
3.33*0.03
0.0999/0.19
10/13
0.05/(sqrt(30/169*(260/16000)))
install.packages("ggforce")
install.packages("venn")
library(venn)
?venn
venn(4, lty = 5, col = "navyblue", ellipse = TRUE)
venn(3, lty = 5, col = "navyblue", ellipse = TRUE)
venn(3, lty = 1, col = "navyblue", ellipse = TRUE)
venn(3, lty = 1, col = "navyblue", ellipse = TRUE, zcolor = "red")
venn(3, lty = 1, col = "navyblue", ellipse = TRUE, zcolor = "red", ggplot = T)
venn(3, lty = 1, col = "navyblue", ellipse = TRUE, zcolor = "red", ggplot = T)
library(ggplot2)
install.packages("ggpolypath")
library(ggpolypath)
venn(3, lty = 1, col = "navyblue", ellipse = TRUE, zcolor = "red", ggplot = T)
# Définir les ensembles A, B et leur intersection
set_A <- c(1, 2, 3, 4, 5)
set_B <- c(3, 4, 5, 6, 7)
intersection_AB <- intersect(set_A, set_B)
# Créer le diagramme de Venn
venn.plot <- venn.plot(
x = list(A = set_A, B = set_B),
category.names = c("A", "B"),
filename = NULL
)
# Créer le diagramme de Venn
venn.plot <- venn(
x = list(A = set_A, B = set_B),
category.names = c("A", "B"),
filename = NULL
)
# Identifiez le complément de l'ensemble A
complement_A <- setdiff(venn.plot$set$A, intersection_AB)
# Afficher le complément de l'ensemble A
print(complement_A)
source("~/.active-rstudio-document", echo=TRUE)
# Créer le diagramme de Venn
venn.plot <- venn("10",
category.names = c("A", "B"),
output = FALSE, ggplot = T
)
venn("10",
category.names = c("A", "B"),
output = FALSE, ggplot = T
)
# Créer le diagramme de Venn
venn.plot <- venn("10",
category.names = c("A", "B"), ggplot = T
)
# Changer la couleur de fond
venn.plot$canvas$theme$fill$fill <- "lightblue"
# Afficher le diagramme avec la nouvelle couleur de fond
grid.draw(venn.plot)
library(ggplot2)
# Afficher le diagramme avec la nouvelle couleur de fond
grid.draw(venn.plot)
install.packages(“VennDiagram”)
install.packages("VennDiagram")
library(VennDiagram)
?venn.diagram
venn.diagram(2)
venn.diagram(2, filename = NULL)
venn.plot <- venn.diagram(
list(A = 1:150, B = 121:170),
filename = tempfile(
pattern = 'Venn_2set_simple',
fileext = '.tiff'
)
)
venn.diagram(
list(A = 1:150, B = 121:170),
filename = tempfile(
pattern = 'Venn_2set_simple',
fileext = '.tiff'
)
)
# move to new plotting page
grid.newpage()
# create pairwise Venn diagram
draw.pairwise.venn(area1=20, area2=45,cross.area=10,
category=c("Mango","Banana"),fill=c("Red","Yellow"))
# create pairwise Venn diagram
draw.pairwise.venn(area1=20, area2=20,cross.area=10,
category=c("Mango","Banana"),fill=c("Red","Yellow"))
# move to new plotting page
grid.newpage()
# create pairwise Venn diagram
draw.pairwise.venn(area1=20, area2=20,cross.area=10,
category=c("Mango","Banana"),fill=c("Red","Yellow"))
# move to new plotting page
grid.newpage()
# create pairwise Venn diagram
draw.pairwise.venn(category=c("Mango","Banana"),fill=c("Red","Yellow"))
?theme_void
?theme_minimal
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
?element_rect
?theme
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
venn(x = "11", lty = 1, opacity= 1, col = "navyblue", ellipse = TRUE, zcolor = "white", ggplot = T, borders = T, plotsize = 10) +
theme_custom("red")
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
theme_void() +
theme(
panel.background = element_rect(fill = bg_color, color = NA),
plot.background = element_rect(fill = "#BFD5E3")
)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
?venn
source("~/.active-rstudio-document", echo=TRUE)
#| echo: false
#| warning: false
library(venn)
library(ggplot2)
library(ggpolypath)
theme_custom <- function(bg_color) {
theme_void() +
theme(
panel.background = element_rect(fill = bg_color, color = NA),
panel.spacing = unit(-1, "cm")
)
}
venn(x = "11", lty = 1, col = "navyblue", ellipse = TRUE, zcolor = "red", ggplot = T, borders = T, plotsize = 10) +
theme_custom("white")
#| echo: false
#| warning: false
library(venn)
library(ggplot2)
library(ggpolypath)
theme_custom <- function(bg_color) {
theme_void() +
theme(
panel.background = element_rect(fill = bg_color, color = NA),
panel.spacing = unit(-1, "cm")
)
}
venn(x = "11", lty = 1, col = "navyblue", ellipse = TRUE, zcolor = "red", ggplot = T, borders = F) +
theme_custom("white")
library(VennDiagram)
# Sample data
setA <- c("A", "B", "C", "D")
setB <- c("A", "B", "C", "D", "E", "F")
# Create the Venn diagram
venn.plot <- venn.plot <- venn.diagram(
x = list(SetA = setA, SetB = setB),
category.names = c("Set A", "Set B"),
filename = NULL,
output = TRUE
)
# Customize the plot to show set A as a subset of set B
venn.plot <- draw.pairwise.venn(
venn.plot,
category.names = c("Set A", "Set B"),
filename = NULL,
output = TRUE,
fill = c("skyblue", "lightgreen"),
category.cex = 2,
scaled = TRUE
)
# Display the plot
grid.draw(venn.plot)
# Customize the plot to show set A as a subset of set B
venn.plot <- draw.pairwise.venn(
venn.plot,
category.names = c("Set A", "Set B"),
filename = NULL,
output = TRUE,
fill = c("skyblue", "lightgreen"),
category.cex = 2,
scaled = TRUE, cross.area = 0
)
install.packages("ggvenn")
library(ggvenn)
install.packages("ggVennDiagram")
library(ggVennDiagram)
ggVennDiagram(x)
set.seed(20190708)
genes <- paste("gene",1:1000,sep="")
x <- list(
A = sample(genes,300),
B = sample(genes,525),
C = sample(genes,440),
D = sample(genes,350)
)
ggVennDiagram(x)
ggVennDiagram(x, label_alpha = 0)
?ggVennDiagram
A
x
ggVennDiagram(x, label_alpha = 0)
set.seed(20190708)
genes <- paste("gene",1:200,sep="")
x <- list(
A = sample(genes,100),
B = sample(genes,200, replace = F)
)
ggVennDiagram(x, label_alpha = 0)
source("~/.active-rstudio-document", echo=TRUE)
# Sample data
circle_data <- data.frame(x = c(1, 2, 3),
y = c(2, 4, 6),
radius = c(0.5, 1, 1.5))
# Create a ggplot with circles
ggplot(circle_data, aes(x, y)) +
geom_circle(aes(r = radius), fill = "skyblue", color = "black", alpha = 0.7) +
theme_minimal() +
xlim(0, 4) +
ylim(0, 8) +
ggtitle("Circles with ggplot2")
source("~/.active-rstudio-document", echo=TRUE)
?geom_circle
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
circles
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
?geom_ellipse
ggplot() +
geom_ellipse(aes(x0 = 0, y0 = 0, a = 10, b = 3, angle = 0)) +
coord_fixed()
ggplot() +
geom_ellipse(aes(x0 = 0, y0 = 0, a = 10, b = 3, angle = 0)) +
geom_circle(aes(x0 = x0, y0 = y0, r = radius, fill = radius), data = circles) +
coord_fixed()
ggplot() +
geom_ellipse(aes(x0 = 0, y0 = 0, a = 10, b = 3, angle = 0)) +
geom_circle(aes(x0 = x0, y0 = y0, r = radius, fill = radius), data = circles) +
coord_fixed() +
theme_custom("white")
ggplot() +
geom_ellipse(aes(x0 = 0, y0 = 0, a = 10, b = 3, angle = 0, fill = "red")) +
geom_circle(aes(x0 = x0, y0 = y0, r = radius, fill = radius), data = circles) +
coord_fixed() +
theme_custom("white")
ggplot() +
geom_ellipse(aes(x0 = 0, y0 = 0, a = 10, b = 3, angle = 0, color = "red")) +
geom_circle(aes(x0 = x0, y0 = y0, r = radius, fill = radius), data = circles) +
coord_fixed() +
theme_custom("white")
ggplot() +
geom_ellipse(aes(x0 = 0, y0 = 0, a = 10, b = 3, angle = 0, fill = "red")) +
geom_circle(aes(x0 = x0, y0 = y0, r = radius, fill = radius), data = circles) +
coord_fixed() +
theme_custom("white")
ggplot() +
geom_ellipse(aes(x0 = 0, y0 = 0, a = 10, b = 3, angle = 0, color = "red")) +
geom_circle(aes(x0 = x0, y0 = y0, r = radius, fill = radius), data = circles) +
coord_fixed() +
theme_custom("white")
# Use coord_fixed to ensure true circularity
ggplot() +
geom_circle(aes(x0 = x0, y0 = y0, r = radius, fill = radius), data = circles) +
coord_fixed() #+
# Use coord_fixed to ensure true circularity
ggplot() +
geom_circle(aes(x0 = x0, y0 = y0, r = radius, fill = radius), data = circles) +
coord_fixed() +
theme_custom("white")+
theme(legend.position = "none")
# Use coord_fixed to ensure true circularity
ggplot() +
geom_circle(aes(x0 = x0, y0 = y0, r = radius, fill = radius), data = circles) +
coord_fixed() +
theme_custom("white")+
theme(legend.position = "none")
# Lets make some data
circles <- data.frame(
x0 = rep(2, 2),
y0 = rep(2, 2),
radius = c(2, 1)
)
?geom_text
# Use coord_fixed to ensure true circularity
ggplot() +
geom_circle(aes(x0 = x0, y0 = y0,
r = rayons), data = cercles) +
coord_fixed() +
geom_text(aes(label = noms), vjust = -0.5, hjust = 0.5, size = 3, color = "red") +
theme_custom("white")+
theme(legend.position = "none")
# Lets make some data
cercles <- data.frame(
x0 = rep(2, 2),
y0 = rep(2, 2),
radius = c(2, 1)
)
# Use coord_fixed to ensure true circularity
ggplot() +
geom_circle(aes(x0 = x0, y0 = y0,
r = rayons), data = cercles) +
coord_fixed() +
geom_text(aes(label = noms), vjust = -0.5, hjust = 0.5, size = 3, color = "red") +
theme_custom("white")+
theme(legend.position = "none")
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
cercles <- data.frame(
x0 = rep(2, 2),
y0 = rep(2, 2),
rayons = c(2, 1),
noms = c("A", "B")
)
# Use coord_fixed to ensure true circularity
ggplot() +
geom_circle(aes(x0 = x0, y0 = y0,
r = rayons), data = cercles) +
coord_fixed() +
geom_text(aes(label = noms), vjust = -0.5, hjust = 0.5, size = 3, color = "red") +
theme_custom("white")+
theme(legend.position = "none")
cercles
cercles <- data.frame(
x0 = rep(2, 2),
y0 = rep(2, 2),
rayons = c(2, 1),
noms = c("A", "B")
)
# Use coord_fixed to ensure true circularity
ggplot() +
geom_circle(aes(x0 = x0, y0 = y0,
r = rayons), data = cercles) +
coord_fixed() +
geom_text(aes(label = noms), vjust = -0.5, hjust = 0.5, size = 3, color = "red") +
theme_custom("white")+
theme(legend.position = "none")
set.seed(42)
df <- data.frame(x = rnorm(10), y = rnorm(10), label = letters[1:10])
# Create a scatter plot
ggplot(df, aes(x, y)) +
geom_point() +
labs(title = "Scatter Plot with Text Labels") +
# Add text labels at specific positions
geom_text(aes(label = label), vjust = -0.5, hjust = 0.5, size = 3, color = "red") +
theme_minimal()
df
# Use coord_fixed to ensure true circularity
ggplot(data = cercles) +
geom_circle(aes(x0 = x0, y0 = y0,
r = rayons)) +
coord_fixed() +
geom_text(aes(label = noms), vjust = -0.5, hjust = 0.5, size = 3, color = "red") +
theme_custom("white")+
theme(legend.position = "none")
# Use coord_fixed to ensure true circularity
ggplot(aes(x0=x0, y0=y0), data = cercles) +
geom_circle(aes(r = rayons)) +
coord_fixed() +
geom_text(aes(label = noms), vjust = -0.5, hjust = 0.5, size = 3, color = "red") +
theme_custom("white")+
theme(legend.position = "none")
# Use coord_fixed to ensure true circularity
ggplot(aes(x=x0, y=y0), data = cercles) +
geom_circle(aes(r = rayons)) +
coord_fixed() +
geom_text(aes(label = noms), vjust = -0.5, hjust = 0.5, size = 3, color = "red") +
theme_custom("white")+
theme(legend.position = "none")
# Use coord_fixed to ensure true circularity
ggplot(aes(x=x0, y=y0), data = cercles) +
geom_circle(aes(x0 = x0, y0 = y0,
r = rayons)) +
coord_fixed() +
geom_text(aes(label = noms), vjust = -0.5, hjust = 0.5, size = 3, color = "red") +
theme_custom("white")+
theme(legend.position = "none")
# Use coord_fixed to ensure true circularity
ggplot(data = cercles) +
geom_circle(aes(x0 = x0, y0 = y0,
r = rayons)) +
coord_fixed() +
geom_text(aes(x = x_lab, y = y_lab,
label = noms), size = 3, color = "red") +
theme_custom("white")+
theme(legend.position = "none")
cercles <- data.frame(
x0 = rep(2, 2),
y0 = rep(2, 2),
rayons = c(2, 1),
noms = c("A", "B")
x_lab = c(1.2, 2.2)
cercles <- data.frame(
x0 = rep(2, 2),
y0 = rep(2, 2),
rayons = c(2, 1),
noms = c("A", "B"),
x_lab = c(1.2, 2.2),
y_lab = c(0.5, 0.75)
)
# Use coord_fixed to ensure true circularity
ggplot(data = cercles) +
geom_circle(aes(x0 = x0, y0 = y0,
r = rayons)) +
coord_fixed() +
geom_text(aes(x = x_lab, y = y_lab,
label = noms), size = 3, color = "red") +
theme_custom("white")+
theme(legend.position = "none")
# Use coord_fixed to ensure true circularity
ggplot(data = cercles) +
geom_circle(aes(x0 = x0, y0 = y0,
r = rayons)) +
coord_fixed() +
geom_text(aes(x = x_lab, y = y_lab,
label = noms), size = 3, color = "red") +
#theme_custom("white")+
theme(legend.position = "none")
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
?geom_text
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
#| echo: false
#| warning: false
library(venn)
library(ggforce)
theme_custom <- function(bg_color) {
theme_void() +
theme(
panel.background = element_rect(fill = bg_color, color = NA),
panel.spacing = unit(-1, "cm")
)
}
cercles <- data.frame(
x0 = rep(0, 1),
y0 = rep(0, 1),
rayons = c(1),
noms = c("A"),
x_lab = c(1.1),
y_lab = c(0.5)
)
# Use coord_fixed to ensure true circularity
ggplot(data = cercles) +
geom_circle(aes(x0 = x0, y0 = y0,
r = rayons, alpha = 1), fill = "white", alpha = 1) +
coord_fixed() +
geom_text(aes(x = x_lab, y = y_lab,
label = noms), size = 4, color = "black") +
theme_custom("lightgreen")+
theme(legend.position = "none")
#| echo: false
#| warning: false
library(venn)
library(ggplot2)
library(ggpolypath)
theme_custom <- function(bg_color) {
theme_void() +
theme(
panel.background = element_rect(fill = bg_color, color = NA),
panel.spacing = unit(-1, "cm")
)
}
venn(x = "11", lty = 1, col = "navyblue", ellipse = TRUE, zcolor = "lightgreen", ggplot = T, box = F, opacity = 1) +
theme_custom("white")
#| echo: false
#| warning: false
library(venn)
library(ggplot2)
library(ggpolypath)
# Définir les ensembles A, B et leur intersection
set_A <- c(1, 2, 3, 4, 5)
set_B <- c(3, 4, 5, 6, 7)
intersection_AB <- intersect(set_A, set_B)
venn(x = "10+11+01", lty = 1, col = "navyblue", ellipse = TRUE, zcolor = "lightgreen", ggplot = T, borders = T, plotsize = 10, opacity = 1, box = F)
